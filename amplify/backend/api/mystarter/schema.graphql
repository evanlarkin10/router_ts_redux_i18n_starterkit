input ModelFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input ModelIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input ModelStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input ModelIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

enum ModelSortDirection {
	ASC
	DESC
}

type Task 
  @model 
  @auth(rules: [
      {allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Employees"], queries: [get, list], mutations: null}
    ])
{
  id: ID!
  title: String!
  description: String
  status: String
}

type User
  @model(
    queries: null
  )
  @key(name: "identity_id", fields: ["identity_id"])
{
  id: ID
  identity_id: String
  first_name: String
  last_name: String
  email: String
  email_verified: Boolean
  org_id: Int
  org_name: String
}

input UpdateUserInput {
  identity_id: String
  first_name: String
  last_name: String
  email: String
  email_verified: Boolean
  org_id: Int
  org_name: String
}

type Preferences
  @model(
    queries: null
  )
  @key(name: "user_id", fields: ["user_id"])
{
  user_id: ID
  pos_preferences: String
}

input UpdatePreferencesInput {
  pos_preferences: String
}

type Transaction @model
  @key(name: "org_date", fields: ["org_id", "createdAt"])
  @auth(
    rules: [
      {
        allow: owner,
        identityField: "sub"
      }
    ]
  )
{
  id: ID!
  org_id: Int
  payment_method: String
  subtotal: Float
  tax: Float 
  total: Float
  createdAt: String
  receipt_items: String
}

input ModelTransactionFilterInput {
	id: ModelIDFilterInput
	org_id: ModelIntFilterInput
	payment_method: ModelStringFilterInput
	subtotal: ModelFloatFilterInput
	tax: ModelFloatFilterInput
	total: ModelFloatFilterInput
	createdAt: ModelStringFilterInput
	receipt_items: ModelStringFilterInput
	and: [ModelTransactionFilterInput]
	or: [ModelTransactionFilterInput]
	not: ModelTransactionFilterInput
}

type Query { 
  getUser: User
  getPreferences: Preferences
  listTransactionsByOrg(org_id: Int, filter: ModelTransactionFilterInput, sort: ModelSortDirection): [Transaction]
}

