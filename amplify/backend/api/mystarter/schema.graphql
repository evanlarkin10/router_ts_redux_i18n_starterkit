type Task 
  @model 
  @auth(rules: [
      {allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete]},
      {allow: groups, groups: ["Employees"], queries: [get, list], mutations: null}
    ])
{
  id: ID!
  title: String!
  description: String
  status: String
}
type PrivateNote
  @model
  @auth(rules: [{allow: owner}])
{
  id: ID!
  content: String!
}

type User
  @model(
    queries: null
  )
  @key(name: "identity_id", fields: ["identity_id"])
{
  id: ID
  identity_id: String
  first_name: String
  last_name: String
  email: String
  email_verified: Boolean
  org_id: Int
  org_name: String
}

input UpdateUserInput {
  identity_id: String
  first_name: String
  last_name: String
  email: String
  email_verified: Boolean
  org_id: Int
  org_name: String
}

type Preferences
  @model(
    queries: null
  )
  @key(name: "user_id", fields: ["user_id"])
{
  user_id: ID
  pos_preferences: String
}

input UpdatePreferencesInput {
  pos_preferences: String
}

type Query { 
  getUser: User
  getPreferences: Preferences
}